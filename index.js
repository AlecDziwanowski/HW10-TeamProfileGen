// uses inquirer to run the prompts
const inquirer = require('inquirer');
// uses file system so we can use associated functions
const fs = require('fs');
// call class constructor files
const Manager = require('./lib/Manager');
const Engineer = require('./lib/Engineer');
const Intern = require('./lib/Intern');

// Initialize array of all employees generated by user
employees = [];

// Initiate prompt
managerPrompts();

// list of prompts for manager
function managerPrompts() {
    inquirer.prompt([
        {
            type: 'input',
            message: 'Please enter your team Manager\'s Name (e.g. David Hasselhoff):',
            name: 'name',
        },
        {
            type: 'input',
            message: 'Please enter your team Manager\'s employee id (e.g. 1):',
            name: 'id',
        },
        {
            type: 'input',
            message: 'Please enter your team Manager\'s email address (e.g. DHasselhoff@aim.com):',
            name: 'email',
        },
        {
            type: 'input',
            message: 'Please enter your team Manager\'s office number (e.g. 240):',
            name: 'officeNumber',
        },
    ])
        // constructs new manager with user inputs and pushes it to an array of all employees generated
        .then(({ name, id, email, officeNumber }) => {
            employees.push(new Manager(name, id, email, officeNumber));
            nextAction();
        });
}

// list of prompts for engineer
function engineerPrompts() {
    inquirer.prompt([
        {
            type: 'input',
            message: 'Please enter your Engineers\'s Name (e.g. David Hasselhoff):',
            name: 'name',
        },
        {
            type: 'input',
            message: 'Please enter your Engineers\'s employee id (e.g. 1):',
            name: 'id',
        },
        {
            type: 'input',
            message: 'Please enter your Engineers\'s email address (e.g. DHasselhoff@aim.com):',
            name: 'email',
        },
        {
            type: 'input',
            message: 'Please enter your Engineers\'s GitHub username (e.g. DHasselhoff):',
            name: 'github',
        },
    ])
        // constructs new engineer with user inputs and pushes it to an array of all employees generated
        .then(({ name, id, email, github }) => {
            employees.push(new Engineer(name, id, email, github));
            nextAction();
        });
}

// list of prompts for interns
function internPrompts() {
    inquirer.prompt([
        {
            type: 'input',
            message: 'Please enter your Interns\'s Name (e.g. David Hasselhoff):',
            name: 'name',
        },
        {
            type: 'input',
            message: 'Please enter your Interns\'s employee id (e.g. 1):',
            name: 'id',
        },
        {
            type: 'input',
            message: 'Please enter your Interns\'s email address (e.g. DHasselhoff@aim.com):',
            name: 'email',
        },
        {
            type: 'input',
            message: 'Please enter your Interns\'s school (e.g. Bates College):',
            name: 'school',
        },
    ])
        // constructs new intern with user inputs and pushes it to an array of all employees generated
        .then(({ name, id, email, school }) => {
            employees.push(new Intern(name, id, email, school));
            nextAction();
        });
}

function nextAction() {
    inquirer.prompt([
        {
            type: 'list',
            message: 'Please choose the next type of employee you would like to enter, if any:',
            choices:
                [
                    'Engineer',
                    'Intern',
                    'Finish Team',
                ],
            name: 'action',
        }
    ])
        // determines next action based on user input
        .then(({ action }) => {
            if (action === 'Engineer') {
                engineerPrompts();
            } else if (action === 'Intern') {
                internPrompts();
            } else {
                writeHTML(employees);
            }
        });
}

function writeHTML(employees) {
    // Write the following text to a new html file
    fs.writeFile('./dist/team.html', `
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link rel="stylesheet" href="style.css">
    <title>My Team</title>
</head>

<body>
    <header>
        <h1 class="text-center bg-danger text-white p-5">My Team</h1>
    </header>

    <main class="d-flex justify-content-center flex-wrap">
    ${generateCards(employees)}
    </main>
</body>

</html>
`, err => {
        err ? console.error(err) : console.log('Generating Web page...');
        process.exit();
    })
}

function generateCards(employees) {
    employeeCards = "";
    employees.forEach(employee => {
        console.log(employee.getRole());
        console.log(employee);
        console.log(employee.name);
        console.log(employee.getRole() === 'Manager');

        if (employee.getRole() === 'Manager') {
            employeeCards += 
    `   <section class="card border rounded m-3 customShadow col-2">
            <div class="bg-primary card-body text-white border rounded-top">
                <h2 class="card-title">${employee.name}</h2>
                <h3 class="card-title">ðŸ‘” Manager</h3>
            </div>
            <div class="bg-light border rounded-bot">
                <ul class="list-group m-4">
                    <li class="list-group-item">ID: ${employee.id}</li>
                    <li class="list-group-item">Email: <a href="mailto:${employee.email}">${employee.email}</a></li>
                    <li class="list-group-item">[Office Number: ${employee.officeNumber}</li>
                </ul>
            </div>
        </section>
    `
        } else if (employee.getRole() === 'Engineer') {
            employeeCards += 
    `    <section class="card border rounded m-3 customShadow col-2">
            <div class="bg-primary card-body text-white border rounded-top">
                <h2 class="card-title">${employee.name}</h2>
                <h3 class="card-title">ðŸ’» Engineer</h3>
            </div>
            <div class="bg-light border rounded-bot">
                <ul class="list-group m-4">
                    <li class="list-group-item">ID: ${employee.id}</li>
                    <li class="list-group-item">Email: <a href="mailto:${employee.email}">${employee.email}</a></li>
                    <li class="list-group-item">GitHub: ${employee.github}</li>
                </ul>
            </div>
        </section>
    `
        } else if (employee.getRole() === 'Intern') {
            employeeCards += 
    `    <section class="card border rounded m-3 customShadow col-2">
            <div class="bg-primary card-body text-white border rounded-top">
                <h2 class="card-title">${employee.name}</h2>
                <h3 class="card-title">ðŸŽ“ Intern</h3>
            </div>
            <div class="bg-light border rounded-bot">
                <ul class="list-group m-4">
                    <li class="list-group-item">ID: ${employee.id}</li>
                    <li class="list-group-item">Email: <a href="mailto:${employee.email}">${employee.email}</a></li>
                    <li class="list-group-item">School: ${employee.school}</li>
                </ul>
            </div>
        </section>
    `
        }
    });
    return employeeCards;
}





    // icebox:
// {
//     type: 'input',
//     message: 'Please enter your team name (e.g. Team Hasselhoff):',
//     name: 'teamName',
// },
// store all prompts in separate file and export in, destructure on import and call in specific functions
// store html in separate file and export in to writeHTML function